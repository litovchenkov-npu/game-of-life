#pragma once

#include <vector>
#include <random>
#include "settings.h"

// Клас ігрової сітки, який реалізовує всі ігрові правила та має методи
// для маніпуляцій із сіткою
class GameGrid {
private:
    int rows; // Кількість рядків у сітці
    int cols; // Кількість стовпців у сітці
    std::vector<std::vector<bool>> grid; // Сітка, представлена двовимірним вектором булевих значень
public:
    GameGrid(int width, int height);
    // Конструктор класу GameGrid. Ініціалізує кількість рядків і стовпців у сітці,
    // а також створює сітку заданого розміру, заповнену хибними значеннями (false)

    void generate();
    // Метод генерації сітки випадковими значеннями. Використовує генератор випадкових чисел
    // для заповнення кожної клітинки сітки випадковим булевим значенням (true або false)

    void clear();
    // Метод для очистки ігрової сітки

    int countNeighbors(int x, int y);
    // Метод підрахунку кількості сусідів для клітинки із заданими координатами (x, y).
    // Перебирає всіх восьми сусідів клітини і збільшує лічильник, якщо сусідня клітина
    // містить живе значення (true)

    void update(std::vector<std::vector<bool>>& nextGrid);
    // Метод оновлення стану сітки на основі правил "Гри життя".
    // Перебирає всі клітини сітки. Залежно від кількості сусідів клітини та її поточного
    // стану, визначає новий стан клітини в наступному поколінні

    bool getCellState(int x, int y) const;
    // Метод отримання стану клітини із заданими координатами (x, y)

    void setCellState(int x, int y, bool state);
    // Метод встановлення стану клітини із заданими координатами (x, y)

    int getRowCount() const;
    // Метод отримання кількості рядків у сітці

    int getColCount() const;
    // Метод отримання кількості стовпців у сітці
};